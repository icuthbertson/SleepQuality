/***************************************************
 * Filename: TestClient.java
 *
 * Synopsis: TestClient creates 10 connections to the
 *           server to test the servers multithreading
 *           using the pause in the Connection class.
 *           It also tests that the character and digit
 *           counts are correct for certain inputs
 *
 * Author:
 *      Iain Cuthbertson, Reg no: 201015895
 *
 * Group:
 *      Tues, 3-5
 *
 * Promise: I confirm that this submission is all my own work.
 *
 *          (Signed)__________________________________________
 *
 * Version: See VERSION below
 *
 * v1.0  	13/11/2012: Initial version. Code taken from
 *          Client.java v1.1 by Iain Cuthbertson and then
 *          duplicated for 10 sockets and input / output
 *          streams. Test cases created for no input,
 *          only characters, only digits, only spaces
 *          and combinations. The servers multithread
 *          was also tested. Test results can be seen
 *          at the bottom of the code. The output
 *          of the server can be seen at the bottom
 *          of the server file.
 ***************************************************/

//Required imports
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;

public class TestClient {
    //Set up sockets and input / output streams
    private static Socket clientSocketTest1;
    private static Socket clientSocketTest2;
    private static Socket clientSocketTest3;
    private static Socket clientSocketTest4;
    private static Socket clientSocketTest5;
    private static Socket clientSocketTest6;
    private static Socket clientSocketTest7;
    private static Socket clientSocketTest8;
    private static Socket clientSocketTest9;
    private static Socket clientSocketTest10;
    private static PrintWriter outTest1;
    private static PrintWriter outTest2;
    private static PrintWriter outTest3;
    private static PrintWriter outTest4;
    private static PrintWriter outTest5;
    private static PrintWriter outTest6;
    private static PrintWriter outTest7;
    private static PrintWriter outTest8;
    private static PrintWriter outTest9;
    private static PrintWriter outTest10;
    private static InputStream inTest1;
    private static InputStream inTest2;
    private static InputStream inTest3;
    private static InputStream inTest4;
    private static InputStream inTest5;
    private static InputStream inTest6;
    private static InputStream inTest7;
    private static InputStream inTest8;
    private static InputStream inTest9;
    private static InputStream inTest10;
    private static int port = 6100;
    
    public static void main(String[] args) {
        startClient();
    }
    
    private static void startClient() {
        try {
            //Initialise sockets
			clientSocketTest1 = new Socket("localhost", port);
            clientSocketTest2 = new Socket("localhost", port);
            clientSocketTest3 = new Socket("localhost", port);
            clientSocketTest4 = new Socket("localhost", port);
            clientSocketTest5 = new Socket("localhost", port);
            clientSocketTest6 = new Socket("localhost", port);
            clientSocketTest7 = new Socket("localhost", port);
            clientSocketTest8 = new Socket("localhost", port);
            clientSocketTest9 = new Socket("localhost", port);
            clientSocketTest10 = new Socket("localhost", port);
            
            System.out.println("Connecting To Local Host On Port 6100...");
            
            //Initialise input / output streams
            outTest1 = new PrintWriter(clientSocketTest1.getOutputStream());
            outTest2 = new PrintWriter(clientSocketTest2.getOutputStream());
            outTest3 = new PrintWriter(clientSocketTest3.getOutputStream());
            outTest4 = new PrintWriter(clientSocketTest4.getOutputStream());
            outTest5 = new PrintWriter(clientSocketTest5.getOutputStream());
            outTest6 = new PrintWriter(clientSocketTest6.getOutputStream());
            outTest7 = new PrintWriter(clientSocketTest7.getOutputStream());
            outTest8 = new PrintWriter(clientSocketTest8.getOutputStream());
            outTest9 = new PrintWriter(clientSocketTest9.getOutputStream());
            outTest10 = new PrintWriter(clientSocketTest10.getOutputStream());
            
            inTest1 = clientSocketTest1.getInputStream();
            inTest2 = clientSocketTest2.getInputStream();
            inTest3 = clientSocketTest3.getInputStream();
            inTest4 = clientSocketTest4.getInputStream();
            inTest5 = clientSocketTest5.getInputStream();
            inTest6 = clientSocketTest6.getInputStream();
            inTest7 = clientSocketTest7.getInputStream();
            inTest8 = clientSocketTest8.getInputStream();
            inTest9 = clientSocketTest9.getInputStream();
            inTest10 = clientSocketTest10.getInputStream();
            
            ObjectInputStream objectInTest1 = new ObjectInputStream(inTest1);
            ObjectInputStream objectInTest2 = new ObjectInputStream(inTest2);
            ObjectInputStream objectInTest3 = new ObjectInputStream(inTest3);
            ObjectInputStream objectInTest4 = new ObjectInputStream(inTest4);
            ObjectInputStream objectInTest5 = new ObjectInputStream(inTest5);
            ObjectInputStream objectInTest6 = new ObjectInputStream(inTest6);
            ObjectInputStream objectInTest7 = new ObjectInputStream(inTest7);
            ObjectInputStream objectInTest8 = new ObjectInputStream(inTest8);
            ObjectInputStream objectInTest9 = new ObjectInputStream(inTest9);
            ObjectInputStream objectInTest10 = new ObjectInputStream(inTest10);
            
            //Sending Strings to the connections
            //Send Test 1
            outTest1.write("This Is Test 1\n");
            outTest1.flush();
            System.out.println("Sent...1");
            
            //Send Test 2
            outTest2.write("This Is The Next Test\n");
            outTest2.flush();
            System.out.println("Sent...2");
            
            //Send Test 3
            outTest3.write("123 + 654 = ?\n");
            outTest3.flush();
            System.out.println("Sent...3");
            
            //Send Test 4
            outTest4.write("It Equals 777\n");
            outTest4.flush();
            System.out.println("Sent...4");
            
            //Send Test 5
            outTest5.write("\n");
            outTest5.flush();
            System.out.println("Sent...5");
            
            //Send Test 6
            outTest6.write("6th Test This Is\n");
            outTest6.flush();
            System.out.println("Sent...6");
            
            //Send Test 7
            outTest7.write("1234567890\n");
            outTest7.flush();
            System.out.println("Sent...7");
            
            //Send Test 8
            outTest8.write("D0o0o0ow0pp\n");
            outTest8.flush();
            System.out.println("Sent...8");
            
            //Send Test 9
            outTest9.write("        \n");
            outTest9.flush();
            System.out.println("Sent...9");
            
            //Send Test 10
            outTest10.write("Hey0\n");
            outTest10.flush();
            System.out.println("Sent...10");

            //Set up variable to be set to the recieved message
            IMessage recieve;
			
            //Recieving messages back and printing out
            //Recieve Test 1
            recieve = (IMessage) objectInTest1.readObject();
            System.out.println("\nTest1\nThis Is Test 1\nCharacters: " + recieve.getCharacterCount() + " Should Be: 10");
            System.out.println("Digits: " + recieve.getDigitCount() + " Should Be: 1");
            
            //Recieve Test 2
            recieve = (IMessage) objectInTest2.readObject();
            System.out.println("\nTest2\nThis Is The Next Test\nCharacters: " + recieve.getCharacterCount() + " Should Be: 17");
            System.out.println("Digits: " + recieve.getDigitCount() + " Should Be: 0");
            
            //Recieve Test 3
            recieve = (IMessage) objectInTest3.readObject();
            System.out.println("\nTest3\n123 + 654 = ?\nCharacters: " + recieve.getCharacterCount() + " Should Be: 3");
            System.out.println("Digits: " + recieve.getDigitCount() + " Should Be: 6");
            
            //Recieve Test 4
            recieve = (IMessage) objectInTest4.readObject();
            System.out.println("\nTest4\nIt Equals 777\nCharacters: " + recieve.getCharacterCount() + " Should Be: 8");
            System.out.println("Digits: " + recieve.getDigitCount() + " Should Be: 3");
            
            //Recieve Test 5
            recieve = (IMessage) objectInTest5.readObject();
            System.out.println("\nTest5\n\nCharacters: " + recieve.getCharacterCount() + " Should Be: 0");
            System.out.println("Digits: " + recieve.getDigitCount() + " Should Be: 0");
            
            //Recieve Test 6
            recieve = (IMessage) objectInTest6.readObject();
            System.out.println("\nTest6\n6th Test This Is\nCharacters: " + recieve.getCharacterCount() + " Should Be: 12");
            System.out.println("Digits: " + recieve.getDigitCount() + " Should Be: 1");
            
            //Recieve Test 7
            recieve = (IMessage) objectInTest7.readObject();
            System.out.println("\nTest7\n1234567890\nCharacters: " + recieve.getCharacterCount() + " Should Be: 0");
            System.out.println("Digits: " + recieve.getDigitCount() + " Should Be: 10");
            
            //Recieve Test 8
            recieve = (IMessage) objectInTest8.readObject();
            System.out.println("\nTest8\nD0o0o0ow0pp\nCharacters: " + recieve.getCharacterCount() + " Should Be: 7");
            System.out.println("Digits: " + recieve.getDigitCount() + " Should Be: 4");
            
            //Recieve Test 9
            recieve = (IMessage) objectInTest9.readObject();
            System.out.println("\nTest9\n        \nCharacters: " + recieve.getCharacterCount() + " Should Be: 0");
            System.out.println("Digits: " + recieve.getDigitCount() + " Should Be: 0");
            
            //Recieve Test 10
            recieve = (IMessage) objectInTest10.readObject();
            System.out.println("\nTest10\nHey0\nCharacters: " + recieve.getCharacterCount() + " Should Be: 3");
            System.out.println("Digits: " + recieve.getDigitCount() + " Should Be: 1");
            
            //Closing all the sockets for security purposes
            clientSocketTest1.close();
            clientSocketTest2.close();
            clientSocketTest3.close();
            clientSocketTest4.close();
            clientSocketTest5.close();
            clientSocketTest6.close();
            clientSocketTest7.close();
            clientSocketTest8.close();
            clientSocketTest9.close();
            clientSocketTest10.close();
        } catch (ClassNotFoundException e) {
            System.out.println("Could Not Find IMessage Class");
            e.printStackTrace();
		} catch (UnknownHostException e) {
			System.out.println("Host Could Not Be Found");
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("Failed To Send To Server");
            System.out.println("Or Failed To Recieve Message Back From Server");
			e.printStackTrace();
		} finally {
            //CLose the client socket after any exception for security purposes
            try {
                clientSocketTest1.close();
                clientSocketTest2.close();
                clientSocketTest3.close();
                clientSocketTest4.close();
                clientSocketTest5.close();
                clientSocketTest6.close();
                clientSocketTest7.close();
                clientSocketTest8.close();
                clientSocketTest9.close();
                clientSocketTest10.close();
            } catch (IOException e) {
                System.out.println("Client Socket Failed To Close");
                e.printStackTrace();
            }
        }
    }
}

/***************************************************
 pc-195-48:ACE2Threaded Iain$ java TestClient
 Connecting To Local Host On Port 6100...
 Sent...1
 Sent...2
 Sent...3
 Sent...4
 Sent...5
 Sent...6
 Sent...7
 Sent...8
 Sent...9
 Sent...10
 
 Test1
 This Is Test 1
 Characters: 10 Should Be: 10
 Digits: 1 Should Be: 1
 
 Test2
 This Is The Next Test
 Characters: 17 Should Be: 17
 Digits: 0 Should Be: 0
 
 Test3
 123 + 654 = ?
 Characters: 3 Should Be: 3
 Digits: 6 Should Be: 6
 
 Test4
 It Equals 777
 Characters: 8 Should Be: 8
 Digits: 3 Should Be: 3
 
 Test5
 
 Characters: 0 Should Be: 0
 Digits: 0 Should Be: 0
 
 Test6
 6th Test This Is
 Characters: 12 Should Be: 12
 Digits: 1 Should Be: 1
 
 Test7
 1234567890
 Characters: 0 Should Be: 0
 Digits: 10 Should Be: 10
 
 Test8
 D0o0o0ow0pp
 Characters: 7 Should Be: 7
 Digits: 4 Should Be: 4
 
 Test9
 
 Characters: 0 Should Be: 0
 Digits: 0 Should Be: 0
 
 Test10
 Hey0
 Characters: 3 Should Be: 3
 Digits: 1 Should Be: 1
 ***************************************************/