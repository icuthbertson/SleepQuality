/* ------------------
   Client
   usage: java Client [Server hostname] [Server RTSP listening port] [Video file requested]
   ---------------------- */

import java.io.*;
import java.net.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.Timer;

public class Client {

    //GUI
    //----
    JFrame f = new JFrame("Client");
    JButton setupButton = new JButton("Setup");
    JButton playButton = new JButton("Play");
    JButton pauseButton = new JButton("Pause");
    JButton tearButton = new JButton("Teardown");
    JButton rewindButton = new JButton("Rewind");
    JButton fastForwardButton = new JButton("Fast Forward");
    JPanel mainPanel = new JPanel();
    JPanel buttonPanel1 = new JPanel();
    JPanel buttonPanel2 = new JPanel();
    // JPanel sliderPanel = new JPanel();
    JLabel iconLabel = new JLabel();
    ImageIcon icon;

    JMenuBar menuBar;
    JMenu menu;
    JMenuItem menuItem;

    ChatClient chat = new ChatClient("localhost", 4444);

    //FAQ Frame
    JFrame faq = new JFrame("FAQ");
    JTextArea faqText;
    JScrollPane faqPane;

    private final static String newline = "\n";

    // JSlider slider = new JSlider();

    //RTP variables:
    //----------------
    DatagramPacket rcvdp; //UDP packet received from the server
    DatagramSocket RTPsocket; //socket to be used to send and receive UDP packets
    static int RTP_RCV_PORT; //port where the client will receive the RTP packets

    Timer timer; //timer used to receive data from the UDP socket
    byte[] buf; //buffer used to store data received from the server 

    //RTSP variables
    //----------------
    //rtsp states 
    final static int INIT = 0;
    final static int READY = 1;
    final static int PLAYING = 2;
    static int state; //RTSP state == INIT or READY or PLAYING
    Socket RTSPsocket; //socket used to send/receive RTSP messages
    //input and output stream filters
    static BufferedReader RTSPBufferedReader;
    static BufferedWriter RTSPBufferedWriter;
    static String VideoFileName; //video file to request to the server
    int RTSPSeqNb = 0; //Sequence number of RTSP messages within the session
    int RTSPid = 0; //ID of the RTSP session (given by the RTSP Server)

    final static String CRLF = "\r\n";

    //Video constants:
    //------------------
    static int MJPEG_TYPE = 26; //RTP payload type for MJPEG video

    static int frameNumber = 0;

    //--------------------------
    //Constructor
    //--------------------------
    public Client() {

        //build GUI
        //--------------------------

        //Frame
        f.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });

        menuBar = new JMenuBar();
        menu = new JMenu("Help");

        menuBar.add(menu);

        menuItem = new JMenuItem("FAQ");

        menu.add(menuItem);

        menuItem.addActionListener(new menuListener());

        //Buttons
        buttonPanel1.setLayout(new GridLayout(1,0));
        buttonPanel1.add(setupButton);
        buttonPanel1.add(playButton);
        buttonPanel1.add(pauseButton);
        buttonPanel1.add(tearButton);
        setupButton.addActionListener(new setupButtonListener());
        playButton.addActionListener(new playButtonListener());
        pauseButton.addActionListener(new pauseButtonListener());
        tearButton.addActionListener(new tearButtonListener());

        buttonPanel2.setLayout(new GridLayout(1,0));
        buttonPanel2.add(rewindButton);
        buttonPanel2.add(fastForwardButton);
        rewindButton.addActionListener(new rewindButtonListener());
        fastForwardButton.addActionListener(new fastForwardButtonListener());

        // sliderPanel.add(slider);
        // slider.setValue(frameNumber);

        //Image display label
        iconLabel.setIcon(null);

        //frame layout
        mainPanel.setLayout(null);
        // slider = new JSlider(JSlider.HORIZONTAL);
        mainPanel.add(iconLabel);
        // mainPanel.add(sliderPanel);
        mainPanel.add(buttonPanel1);
        mainPanel.add(buttonPanel2);
        mainPanel.add(chat);
        iconLabel.setBounds(0,0,380,280);
        // sliderPanel.setBounds(0,280,380,50);
        buttonPanel1.setBounds(0,280,380,50);
        buttonPanel2.setBounds(0,330,380,50);
        chat.setBounds(0,380,380,130);

        f.setJMenuBar(menuBar);

        f.getContentPane().add(mainPanel, BorderLayout.CENTER);
        f.setSize(new Dimension(380,555));
        f.setResizable(false);
        f.setVisible(true);

        //faq frame
        faq.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                faq.dispose();
            }
        });

        faqText = new JTextArea();
        faqText.setLineWrap(true);
        faqText.setWrapStyleWord(true);
        faqText.setEditable(false);
        faqText.append("FAQ" + newline + newline);
        faqText.append("Q: Why is there only one video i can stream?" + newline);
        faqText.append("A: The Mjpeg file we are streaming to you is the only .Mjpeg file in existance!" + newline + newline);
        faqText.append("Q: Why are people in the chat mean?" + newline);
        faqText.append("A: You are on the internet! Deal with it!" + newline + newline);
        faqPane = new JScrollPane(faqText);
        faq.add(faqPane);

        faq.setSize(400, 400);
        faq.setResizable(false);

        //init timer
        //--------------------------
        timer = new Timer(20, new timerListener());
        timer.setInitialDelay(0);
        timer.setCoalesce(true);

        //allocate enough memory for the buffer used to receive data from the server
        buf = new byte[15000];    
    }

    //------------------------------------
    //main
    //------------------------------------
    public static void main(String argv[]) throws Exception
    {
        //Create a Client object
        Client theClient = new Client();

        //get server RTSP port and IP address from the command line
        //------------------
        int RTSP_server_port = Integer.parseInt(argv[1]);
        String ServerHost = argv[0];
        InetAddress ServerIPAddr = InetAddress.getByName(ServerHost);

        RTP_RCV_PORT = Integer.parseInt(argv[2]);

        //get video filename to request:
        VideoFileName = argv[3];

        //Establish a TCP connection with the server to exchange RTSP messages
        //------------------
        theClient.RTSPsocket = new Socket(ServerIPAddr, RTSP_server_port);

        //Set input and output stream filters:
        RTSPBufferedReader = new BufferedReader(new InputStreamReader(theClient.RTSPsocket.getInputStream()) );
        RTSPBufferedWriter = new BufferedWriter(new OutputStreamWriter(theClient.RTSPsocket.getOutputStream()) );

        //init RTSP state:
        state = INIT;

        System.out.println(RTP_RCV_PORT);
    }


    //------------------------------------
    //Handler for buttons
    //------------------------------------


    //Handler for Setup button
    //-----------------------
    class setupButtonListener implements ActionListener{
        public void actionPerformed(ActionEvent e){

            //System.out.println("Setup Button pressed !");      

            if (state == INIT) 
            {
                //Init non-blocking RTPsocket that will be used to receive data
                try{
                    //construct a new DatagramSocket to receive RTP packets from the server, on port RTP_RCV_PORT
                    RTPsocket = new DatagramSocket(RTP_RCV_PORT);

                    //set TimeOut value of the socket to 5msec.
                    RTPsocket.setSoTimeout(5);

                }
                catch (SocketException se)
                {
                    //no response after 5 milliseconds so communication stops
                    System.out.println("Socket exception: "+se);
                    System.exit(0);
                }

                //init RTSP sequence number
                RTSPSeqNb = 1;

                //Send SETUP message to the server
                send_RTSP_request("SETUP");

                //Wait for the response 
                if (parse_server_response() != 200)
                    System.out.println("Invalid Server Response");
                else 
                {
                    //change RTSP state and print new state 
                    state = READY;
                    System.out.println("New RTSP state: READY");
                }
            }else if (state != INIT){
            }
        }
    }
    //Handler for Play button
    //-----------------------
    class playButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent e){

            System.out.println("Play Button pressed !"); 

            if (state == READY) 
            {
                //increase RTSP sequence number
                RTSPSeqNb++;


                //Send PLAY message to the server
                send_RTSP_request("PLAY");

                //Wait for the response 
                if (parse_server_response() != 200)
                    System.out.println("Invalid Server Response");
                else 
                {
                    //change RTSP state and print out new state
                    state = PLAYING;
                    System.out.println("New RTSP state: PLAYING");

                    //start the timer
                    timer.start();
                }
            }else if (state != READY){
            }
        }
    }


    //Handler for Pause button
    //-----------------------
    class pauseButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent e){

            //System.out.println("Pause Button pressed !");   

            if (state == PLAYING) 
            {
                //increase RTSP sequence number
                RTSPSeqNb++;

                //Send PAUSE message to the server
                send_RTSP_request("PAUSE");

                //Wait for the response 
                if (parse_server_response() != 200)
                    System.out.println("Invalid Server Response");
                else 
                {
                    //change RTSP state and print out new state
                    state = READY;
                    System.out.println("New RTSP state: READY");

                    //stop the timer
                    timer.stop();
                }
            }
            else if (state != PLAYING){
            }
        }
    }

    //Handler for Teardown button
    //-----------------------
    class tearButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent e){

            //System.out.println("Teardown Button pressed !");  

            RTSPSeqNb++;

            //Send TEARDOWN message to the server
            send_RTSP_request("TEARDOWN");

            //Wait for the response 
            if (parse_server_response() != 200)
                System.out.println("Invalid Server Response");
            else 
            {     
                //change RTSP state and print out new state
                state = INIT;
                System.out.println("New RTSP state: INIT");

                //stop the timer
                timer.stop();

                //exit
                System.exit(0);
            }
        }
    }

    //Handler for Rewind button
    //-----------------------
    class rewindButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent e){

            System.out.println("Rewind Button pressed !"); 

            if (state == PLAYING || state == READY) 
            {
                //increase RTSP sequence number
                RTSPSeqNb++;


                //Send PLAY message to the server
                send_RTSP_request("REWIND");

                //Wait for the response 
                if (parse_server_response() != 200)
                    System.out.println("Invalid Server Response");
                else 
                {
                    timer.start();
                }
            }
        }
    }

    //Handler for FastFoward button
    //-----------------------
    class fastForwardButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent e){

            System.out.println("FastFoward Button pressed !"); 

            if (state == PLAYING || state == READY) 
            {
                //increase RTSP sequence number
                RTSPSeqNb++;


                //Send PLAY message to the server
                send_RTSP_request("FASTFORWARD");

                //Wait for the response 
                if (parse_server_response() != 200)
                    System.out.println("Invalid Server Response");
                else 
                {
                    timer.start();
                }
            }
        }
    }



    //------------------------------------
    //Handler for timer
    //------------------------------------

    class timerListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {

            //Construct a DatagramPacket to receive data from the UDP socket
            rcvdp = new DatagramPacket(buf, buf.length);

            try{
                //receive the DP from the socket:
                RTPsocket.receive(rcvdp);

                //create an RTPpacket object from the DP
                RTPpacket rtp_packet = new RTPpacket(rcvdp.getData(), rcvdp.getLength());

                //print important header fields of the RTP packet received: 
                System.out.println("Got RTP packet with SeqNum # "+rtp_packet.getsequencenumber()+" TimeStamp "+rtp_packet.gettimestamp()+" ms, of type "+rtp_packet.getpayloadtype());

                //print header bitstream:
                rtp_packet.printheader();

                //get the payload bitstream from the RTPpacket object
                int payload_length = rtp_packet.getpayload_length();
                byte [] payload = new byte[payload_length];
                rtp_packet.getpayload(payload);

                // frameNumber = rtp_packet.getsequencenumber();
                // slider.setValue(frameNumber);

                //get an Image object from the payload bitstream
                Toolkit toolkit = Toolkit.getDefaultToolkit();
                Image image = toolkit.createImage(payload, 0, payload_length);

                //display the image as an ImageIcon object
                icon = new ImageIcon(image);
                iconLabel.setIcon(icon);
            }
            catch (InterruptedIOException iioe){
                //System.out.println("Nothing to read");
            }
            catch (IOException ioe) {
                System.out.println("Exception caught: "+ioe);
            }
        }

    }

    class menuListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {

            faq.setVisible(true);
            
        }
    }

    //------------------------------------
    //Parse Server Response
    //------------------------------------
    private int parse_server_response() 
    {
        int reply_code = 0;

        try{
            //parse status line and extract the reply_code:
            String StatusLine = RTSPBufferedReader.readLine();
            System.out.println("RTSP Client - Received from Server:");
            System.out.println(StatusLine);

            StringTokenizer tokens = new StringTokenizer(StatusLine);
            tokens.nextToken(); //skip over the RTSP version
            reply_code = Integer.parseInt(tokens.nextToken());

            //if reply code is OK get and print the 2 other lines
            if (reply_code == 200)
            {
                String SeqNumLine = RTSPBufferedReader.readLine();
                System.out.println(SeqNumLine);

                String SessionLine = RTSPBufferedReader.readLine();
                System.out.println(SessionLine);

                //if state == INIT gets the Session Id from the SessionLine
                tokens = new StringTokenizer(SessionLine);
                tokens.nextToken(); //skip over the Session:
                RTSPid = Integer.parseInt(tokens.nextToken());
            }
        }
        catch(Exception ex)
        {
            System.out.println("Exception caught: "+ex);
            System.exit(0);
        }

        return(reply_code);
    }

    //------------------------------------
    //Send RTSP Request
    //------------------------------------

    //.............
    //TO COMPLETE
    //.............

    private void send_RTSP_request(String request_type)
    {
        try{

            //Use the RTSPBufferedWriter to write to the RTSP socket
            //write the request line:
            RTSPBufferedWriter.write(request_type + " " +  VideoFileName + " RTSP/1.0" +CRLF);
            //  System.out.println(request_type);
            //write the CSeq line: 

            if ((request_type).compareTo("TEARDOWN") == 0)
                chat.stop();

            System.out.println(request_type);

            RTSPBufferedWriter.write("CSeq: " + RTSPSeqNb + CRLF);
            //   System.out.println(RTSPSeqNb);
            //check if request_type is equal to "SETUP" and in this case write the Transport: 
            //line advertising to the server the port used to receive the RTP packets RTP_RCV_PORT
            if(request_type.compareTo("SETUP") == 0)
            {
                RTSPBufferedWriter.write("Transport: RTP/UDP; client_port= " + RTP_RCV_PORT + CRLF);
            }
            else
            {
                RTSPBufferedWriter.write("Session: " + RTSPid + CRLF);
            }
            //if ....
            //otherwise, write the Session line from the RTSPid field
            //else ....

            RTSPBufferedWriter.flush();
        }
        catch(Exception ex)
        {
            System.out.println("Exception caught: "+ex);
            System.exit(0);
        }
    }
}
//end of Class Client