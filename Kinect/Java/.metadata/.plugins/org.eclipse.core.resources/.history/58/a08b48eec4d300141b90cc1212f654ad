/***************************************************
 * Filename: Server.java
 *
 * Synopsis: Server recieves a String from the client and
 *           returns a Message that contains the counts of
 *           digits and characters.
 *
 * Author:
 *      Iain Cuthbertson, Reg no: 201015895
 *
 * Group:
 *      Tues, 3-5
 *
 * Promise: I confirm that this submission is all my own work.
 *
 *          (Signed)__________________________________________
 *
 * Version: See VERSION below
 *
 * v1.0  	13/11/2012: Initial version. Code based off of
 *          the code from the Oracle site tutorial found at
 *          http://www.oracle.com/technetwork/java/socket-140484.html#client
 *          Code set up to read in a String sent from the
 *          client and then print out and send a String 
 *          back to the client.
 * v1.1     13/11/2012: Updated to read in String and then
 *          create a Message to send back to the client using
 *          an ObjectOutputStream to send it back to the client.
 * v1.2     15/11/2012: Updated to work with threads. Majoritory
 *          of the code moved to the new Connection class.
 *          only code left creates the server socket and accepts
 *          connections and then creates a new thread for that connection.
 * v1.3     16/11/2012: Updated to use thread pools. Cached thread
 *          pool implemented because it would be more realistic 
 *          for a server having a "infinite" number of connections
 *          available.
 *          Sources used for the Thread pool are:
 *          http://docs.oracle.com/javase/tutorial/essential/concurrency/pools.html
 *          and
 *          http://tutorials.jenkov.com/java-multithreaded-servers/thread-pooled-server.html
 ***************************************************/

//Required imports
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Server {
    //Set up the server socket, port number and thread pool
	private static ServerSocket serverSocket;
    private static int port = 6100;
    private static ExecutorService threadPool;
	
    public static void main(String[] args) {
    	try {
            //Initialise the thread pool to a cached thread pool
            //for an "infinite" sized pool
            threadPool = Executors.newCachedThreadPool();
            //Initialise the server socket to port 6100
			serverSocket = new ServerSocket(port);
            
            //Print to make sure that the socket opened correctly
            System.out.println("Listening To Port 6100...");
            
            //Loop forever assuming the server will always be on
            while(true) {
                //Accept connection from the client
                Socket client = serverSocket.accept();
                
                //Create a new Connection for the client and
                //execute it in a thread from the thread pool
                threadPool.execute(new Connection(client));
            }
        } catch (IOException e) {
            System.out.println("Server Socket Failed To Initialise");
            System.out.println("Or Failed To Accept Client Connection");
            //If something fails close the server socket for security purposes
            try {
                serverSocket.close();
            } catch (IOException e1) {
                System.out.println("Server Socket Failed To Close");
                e1.printStackTrace();
            }
            e.printStackTrace();
        }
    }
}

/***************************************************
pc-195-48:ACE2Threaded Iain$ java Server
Listening To Port 6100...
Recieved Message From Client...
Recieved Message From Client...
Recieved Message From Client...
Recieved Message From Client...
Recieved Message From Client...
Sending Return Message...
Sending Return Message...
Sending Return Message...
Sending Return Message...
Sending Return Message...
Recieved Message From Client...
Sending Return Message...
Recieved Message From Client...
Sending Return Message...
Recieved Message From Client...
Sending Return Message...
Recieved Message From Client...
Sending Return Message...
Recieved Message From Client...
Sending Return Message...
 ***************************************************/