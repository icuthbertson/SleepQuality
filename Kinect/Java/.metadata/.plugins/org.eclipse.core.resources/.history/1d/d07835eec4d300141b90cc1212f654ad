/***************************************************
 * Filename: Connection.java
 *
 * Synopsis: Connection is designed to run in a thread
 *           so that the server works via multithreading
 *
 * Author:
 *      Iain Cuthbertson, Reg no: 201015895
 *
 * Group:
 *      Tues, 3-5
 *
 * Promise: I confirm that this submission is all my own work.
 *
 *          (Signed)__________________________________________
 *
 * Version: See VERSION below
 *
 * v1.0  	13/11/2012: Initial version. 
 *          Taken from Server.java v1.1 by Iain Cuthbertson
 *          Constructor created to take in a socket that
 *          is connected to the server. The run method
 *          contains code directly copied from server v1.1
 *          with no changes being required.
 * v1.1     18/11/2012: Updated for testing adding code to
 *          pause the tread and catch the required exception.
 *          this was done so that multiple connection to the
 *          server could be made without threads ending
 *          before more could be made to check that the
 *          multithreading worked. Code currently commented
 *          out, remove comments when testing multithreading.
 ***************************************************/

//Required imports
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.net.UnknownHostException;

public class Connection implements Runnable {
    //Set up fields for the socket and input / output streams
    private Socket client;
    private OutputStream out;
    private BufferedReader in;

    public Connection(Socket client) {
        this.client = client;
    }
    
    public void run() {
        try {
            //Initialise the input and output streams between the client and server
            out = client.getOutputStream();
            ObjectOutputStream objectOut = new ObjectOutputStream(out);
            in = new BufferedReader(new InputStreamReader(client.getInputStream()));
            
            //Read in String from the client
            String recieve = in.readLine();
            
            System.out.println("Recieved Message From Client...");
            
            //Create a new message with the recieved text from the client
            IMessage message = new Message(recieve);
            
            System.out.println("Sending Return Message...");
            
            //Remove the comment from the line below when testing
            Thread.sleep(10000);
            
            //Send the Message object back to the client and flush the
            //output to make sure it's empty
            objectOut.writeObject(message);
            objectOut.flush();
            
            //Close the socket for security purposes
            client.close();
            return; //Make sure the thread terminates
        //Remove the comments from the three lines below when testing
        } catch (InterruptedException e) {
            System.out.println("Thread Failed To Sleep");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println("Failed To Recieve From Client");
            System.out.println("Or Failed To Send Back To Client");
            System.out.println("Or Failed To Close Socket");
            e.printStackTrace();
        } finally {
            //If something fails before the socket is closed, close it for security purposes.
            try {
                client.close();
            } catch (IOException e1) {
                System.out.println("Client Socket Failed To Close");
                e1.printStackTrace();
            }
        }
    }
}