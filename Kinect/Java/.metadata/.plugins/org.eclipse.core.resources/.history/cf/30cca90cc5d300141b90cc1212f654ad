/* ------------------
   Server
   usage: java Server [RTSP listening port]
   ---------------------- */


import java.io.*;
import java.net.*;
import java.awt.*;
import java.util.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.Timer;

public class ServerThread extends Thread implements ActionListener {

    /**
     * 
     */
    private static final long serialVersionUID = -6638081120694988142L;
    //RTP variables:
    //----------------
    DatagramSocket RTPsocket; //socket to be used to send and receive UDP packets
    DatagramPacket senddp; //UDP packet containing the video frames

    InetAddress ClientIPAddr; //Client IP address
    int RTP_dest_port = 0; //destination port for RTP packets  (given by the RTSP Client)

    JLabel label;
    JFrame f;

    //Video variables:
    //----------------
    int imagenb = 0; //image nb of the image currently transmitted
    VideoStream video; //VideoStream object used to access video frames
    int MJPEG_TYPE = 26; //RTP payload type for MJPEG video
    int FRAME_PERIOD = 100; //Frame period of the video to stream, in ms
    int VIDEO_LENGTH = 500; //length of the video in frames

    Timer timer; //timer used to send the images at the video frame rate
    byte[] buf; //buffer used to store the images to send to the client 

    //RTSP variables
    //----------------
    //rtsp states
    final static int INIT = 0;
    final static int READY = 1;
    final static int PLAYING = 2;
    //rtsp message types
    final static int SETUP = 3;
    final static int PLAY = 4;
    final static int PAUSE = 5;
    final static int TEARDOWN = 6;
    final static int REWIND = 7;
    final static int FASTFORWARD = 8;

    int state; //RTSP Server state == INIT or READY or PLAY
    Socket RTSPsocket; //socket used to send/receive RTSP messages
    //input and output stream filters
    BufferedReader RTSPBufferedReader;
    BufferedWriter RTSPBufferedWriter;
    String VideoFileName; //video file requested from the client
    int RTSP_ID = 123456; //ID of the RTSP session
    int RTSPSeqNb = 0; //Sequence number of RTSP messages within the session

    final static String CRLF = "\r\n";

    ArrayList<String> videolist;

    //--------------------------------
    //Constructor
    //--------------------------------
    public ServerThread(Socket client, ArrayList<String> videolist) {

        //init Frame
        super("Server");

        this.RTSPsocket = client;

        this.videolist = videolist;

        //init Timer
        timer = new Timer(FRAME_PERIOD, this);
        timer.setInitialDelay(0);
        timer.setCoalesce(true);

        //allocate memory for the sending buffer
        buf = new byte[15000]; 

        f = new JFrame("Server");

        //Handler to close the main window
        f.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                //stop the timer and exit
                timer.stop();
                System.exit(0);
            }});

        //GUI:
        
        label = new JLabel("Send frame #        ", JLabel.CENTER);
        f.getContentPane().add(label, BorderLayout.CENTER);

        f.pack();
        f.setVisible(true);
    }

    //------------------------------------
    //main
    //------------------------------------
    public void run()
    {
        //Get Client IP address
        this.ClientIPAddr = this.RTSPsocket.getInetAddress();

        //Initiate RTSPstate
        state = INIT;

        //Set input and output stream filters:
        try {
            RTSPBufferedReader = new BufferedReader(new InputStreamReader(this.RTSPsocket.getInputStream()) );
            RTSPBufferedWriter = new BufferedWriter(new OutputStreamWriter(this.RTSPsocket.getOutputStream()) );
        } catch (IOException e) {
            System.out.println("Buffered Writer And Reader Failed To Start");
            e.printStackTrace();
        }

        //Wait for the SETUP message from the client
        int request_type;
        boolean done = false;
        while(!done)
        {
            request_type = this.parse_RTSP_request(); //blocking

            if (request_type == SETUP)
            {
                done = true;

                //update RTSP state
                state = READY;
                System.out.println("New RTSP state: READY");

                //Send response
                this.send_RTSP_response();

                //init the VideoStream object:
                try {
                    this.video = new VideoStream(VideoFileName);
                } catch (Exception e) {
                    System.out.println("Video Stream Failed To Start");
                    e.printStackTrace();
                }

                //init RTP socket
                try {
                    this.RTPsocket = new DatagramSocket();
                } catch (IOException e) {
                    System.out.println("RTPsocket Failed To Start");
                    e.printStackTrace();
                }

                int bitrate = BWD();
                System.out.println("The current bandwidth available :" + bitrate);
                buf = new byte[15000]; 

                if(bitrate >= 40000) {
                    int split = 0;
                    for(int i = 0; i < VideoFileName.length(); i++) {
                        if(VideoFileName.charAt(i) == '.') {
                            split = i;
                        } 
                    }
                    VideoFileName = new String(VideoFileName.substring(0, split) + "-40000" + VideoFileName.substring(split, VideoFileName.length()));
                    System.out.println(VideoFileName);
                } else if(bitrate < 40000 && bitrate >= 20000) {
                    int split = 0;
                    for(int i = 0; i < VideoFileName.length(); i++) {
                        if(VideoFileName.charAt(i) == '.') {
                            split = i;
                        } 
                    }
                    VideoFileName = new String(VideoFileName.substring(0, split) + "-20000" + VideoFileName.substring(split, VideoFileName.length()));
                    System.out.println(VideoFileName);
                }

                try {
                    this.video = new VideoStream(VideoFileName);
                } catch (Exception e) {
                    System.out.println("Video Stream Failed To Start");
                    e.printStackTrace();
                }
            }
        }

        boolean closed = false;

        //loop to handle RTSP requests
        while(!closed)
        {
            //parse the request
            request_type = this.parse_RTSP_request(); //blocking

            if ((request_type == PLAY) && (state == READY))
            {
                //send back response
                this.send_RTSP_response();
                //start timer
                this.timer.start();
                //update state
                state = PLAYING;
                System.out.println("New RTSP state: PLAYING");
            }
            else if ((request_type == PAUSE) && (state == PLAYING))
            {
                //send back response
                this.send_RTSP_response();
                //stop timer
                this.timer.stop();
                //update state
                state = READY;
                System.out.println("New RTSP state: READY");
            }
            else if ((request_type == REWIND) && (state == PLAYING)) 
            {
                this.send_RTSP_response();
                imagenb -= 20;
                if(imagenb < 0) {
                    imagenb = 0;
                }
                video.skipBack(buf, 10);
                buf = new byte[15000]; 
                System.out.println("New RTSP state: REWIND");
            }
            else if ((request_type == FASTFORWARD) && (state == PLAYING)) 
            {
                this.send_RTSP_response();
                imagenb += 10;
                video.skipForward(buf, 10);
                buf = new byte[15000]; 
                System.out.println("New RTSP state: FASTFORWARD");
            }
            else if ((request_type == REWIND) && (state == READY)) 
            {
                this.send_RTSP_response();
                imagenb -= 40;
                if(imagenb < 0) {
                    imagenb = 0;
                }
                video.skipBack(buf, 20);
                buf = new byte[15000]; 
                System.out.println("New RTSP state: REWIND");
                if(state == READY){
                    timer.start();
                    int image_length = 0;
                    try {
                        image_length = video.getnextframe(buf);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    //Builds an RTPpacket object containing the frame
                    RTPpacket rtp_packet = new RTPpacket(MJPEG_TYPE, imagenb, imagenb*FRAME_PERIOD, buf, image_length);

                    //get to total length of the full rtp packet to send
                    int packet_length = rtp_packet.getlength();

                    //retrieve the packet bitstream and store it in an array of bytes
                    byte[] packet_bits = new byte[packet_length];
                    rtp_packet.getpacket(packet_bits);

                    //send the packet as a DatagramPacket over the UDP socket 
                    senddp = new DatagramPacket(packet_bits, packet_length, ClientIPAddr, RTP_dest_port);
                    try {
                        RTPsocket.send(senddp);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                    //System.out.println("Send frame #"+imagenb);
                    //print the header bitstream
                    rtp_packet.printheader();

                    //update GUI
                    label.setText("Send frame #" + imagenb);
                    timer.stop();
                }
                buf = new byte[15000];
            }
               
            else if ((request_type == FASTFORWARD) && (state == READY)) 
            {
                this.send_RTSP_response();
                imagenb += 20;
                video.skipForward(buf, 20);
                buf = new byte[15000]; 
                System.out.println("New RTSP state: FASTFORWARD");
                if(state == READY){
                    timer.start();
                    int image_length = 0;
                    try {
                        image_length = video.getnextframe(buf);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    //Builds an RTPpacket object containing the frame
                    RTPpacket rtp_packet = new RTPpacket(MJPEG_TYPE, imagenb, imagenb*FRAME_PERIOD, buf, image_length);

                    //get to total length of the full rtp packet to send
                    int packet_length = rtp_packet.getlength();

                    //retrieve the packet bitstream and store it in an array of bytes
                    byte[] packet_bits = new byte[packet_length];
                    rtp_packet.getpacket(packet_bits);

                    //send the packet as a DatagramPacket over the UDP socket 
                    senddp = new DatagramPacket(packet_bits, packet_length, ClientIPAddr, RTP_dest_port);
                    try {
                        RTPsocket.send(senddp);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                    //System.out.println("Send frame #"+imagenb);
                    //print the header bitstream
                    rtp_packet.printheader();

                    //update GUI
                    label.setText("Send frame #" + imagenb);
                    timer.stop();
                }
                buf = new byte[15000];
            }
            else if (request_type == TEARDOWN)
            {
                //send back response
                this.send_RTSP_response();
                //stop timer
                this.timer.stop();
                //close sockets
                try {
                    this.RTSPsocket.close();
                } catch (IOException e) {
                    System.out.println("Socket Failed To Close");
                    e.printStackTrace();
                }
                closed = true;
            }
        }
        f.dispose();
        return;
    }


    //------------------------
    //Handler for timer
    //------------------------
    public void actionPerformed(ActionEvent e) {

        //if the current image nb is less than the length of the video
        if (imagenb < VIDEO_LENGTH)
        {
            //update current imagenb
            imagenb++;

            try {
                //get next frame to send from the video, as well as its size
                int image_length = video.getnextframe(buf);

                //Builds an RTPpacket object containing the frame
                RTPpacket rtp_packet = new RTPpacket(MJPEG_TYPE, imagenb, imagenb*FRAME_PERIOD, buf, image_length);

                //get to total length of the full rtp packet to send
                int packet_length = rtp_packet.getlength();

                //retrieve the packet bitstream and store it in an array of bytes
                byte[] packet_bits = new byte[packet_length];
                rtp_packet.getpacket(packet_bits);

                //send the packet as a DatagramPacket over the UDP socket 
                senddp = new DatagramPacket(packet_bits, packet_length, ClientIPAddr, RTP_dest_port);
                RTPsocket.send(senddp);

                //System.out.println("Send frame #"+imagenb);
                //print the header bitstream
                rtp_packet.printheader();

                //update GUI
                label.setText("Send frame #" + imagenb);
            }
            catch(Exception ex)
            {
                System.out.println("Exception caught: "+ex);
                System.exit(0);
            }
        }
        else
        {
            //if we have reached the end of the video file, stop the timer
            timer.stop();
        }
    }

    //------------------------------------
    //Parse RTSP Request
    //------------------------------------
    private int parse_RTSP_request()
    {

        int request_type = -1;
        try{
            //parse request line and extract the request_type:
            String RequestLine = RTSPBufferedReader.readLine();
            // System.out.println("RTSP Server - Received from Client:");
            System.out.println(RequestLine);

            StringTokenizer tokens = new StringTokenizer(RequestLine);
            String request_type_string = tokens.nextToken();

            //convert to request_type structure:
            if ((new String(request_type_string)).compareTo("SETUP") == 0)
                request_type = SETUP;
            else if ((new String(request_type_string)).compareTo("PLAY") == 0)
                request_type = PLAY;
            else if ((new String(request_type_string)).compareTo("PAUSE") == 0)
                request_type = PAUSE;
            else if ((new String(request_type_string)).compareTo("TEARDOWN") == 0)
                request_type = TEARDOWN;
            else if ((new String(request_type_string)).compareTo("REWIND") == 0)
                request_type = REWIND;
            else if ((new String(request_type_string)).compareTo("FASTFORWARD") == 0)
                request_type = FASTFORWARD;

            if (request_type == SETUP)
            {
                //extract VideoFileName from RequestLine
                VideoFileName = tokens.nextToken();
            }

            //parse the SeqNumLine and extract CSeq field
            String SeqNumLine = RTSPBufferedReader.readLine();
            System.out.println(SeqNumLine);
            tokens = new StringTokenizer(SeqNumLine);
            tokens.nextToken();
            RTSPSeqNb = Integer.parseInt(tokens.nextToken());

            //get LastLine
            String LastLine = RTSPBufferedReader.readLine();
            System.out.println(LastLine);

            if (request_type == SETUP)
            {
                //extract RTP_dest_port from LastLine
                tokens = new StringTokenizer(LastLine);
                for (int i=0; i<3; i++)
                    tokens.nextToken(); //skip unused stuff
                RTP_dest_port = Integer.parseInt(tokens.nextToken());
            }
            if(request_type == PLAY)
            {
                if(video == null) { video = new VideoStream(VideoFileName); }
            }
            //else LastLine will be the SessionId line ... do not check for now.
        }
        catch(Exception ex)
        {
            System.out.println("Exception caught: "+ex);
            System.exit(0);
        }
        return(request_type);
    }

    //------------------------------------
    //Send RTSP Response
    //------------------------------------
    private void send_RTSP_response()
    {
        try{
            RTSPBufferedWriter.write("RTSP/1.0 200 OK"+CRLF);
            RTSPBufferedWriter.write("CSeq: "+RTSPSeqNb+CRLF);
            RTSPBufferedWriter.write("Session: "+RTSP_ID+CRLF);
            RTSPBufferedWriter.flush();
            System.out.println("RTSP Server - Sent response to Client.");
        }
        catch(Exception ex)
        {
            System.out.println("Exception caught: "+ex);
            System.exit(0);
        }
    }

    private int BWD()
    {
        long start = System.currentTimeMillis();
        buf = new byte[15000]; 
        System.out.println("DOWNLOAD FOR BWD");
        //Builds an RTPpacket object containing the frame
        RTPpacket rtp_packet = new RTPpacket(MJPEG_TYPE, imagenb, imagenb*FRAME_PERIOD, buf, 0);
                    //get to total length of the full rtp packet to send
        int packet_length = rtp_packet.getlength();
        //retrieve the packet bitstream and store it in an array of bytes
        byte[] packet_bits = new byte[packet_length];
        rtp_packet.getpacket(packet_bits);

        //send the packet as a DatagramPacket over the UDP socket 
        senddp = new DatagramPacket(packet_bits, packet_length, ClientIPAddr, RTP_dest_port);
        try {
            RTPsocket.send(senddp);
        } catch (IOException e) {
            e.printStackTrace();
        }

        rtp_packet.printheader();
        long end = System.currentTimeMillis();
        System.out.println("the Length is " +  senddp.getLength()*8 + 
                            "\n Time it started was " + start +
                            "ms\n Time it stopped was " + end );
        return((int)((senddp.getLength()*8)/(end-start)*1000));
    }
}